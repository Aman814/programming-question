class Solution {
public:
    int monotonicfunc(vector<vector<int>>& matrix,int val)
    {
        int n=matrix.size();
        int count=0;
      int r=0;
     int c=n-1;
        while(r<n && c>=0)
        {
            if(matrix[r][c]<=val){
                count+=c+1;
            r++;}
            else
                c--;
        }
        return count;
        
    }
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int mini=matrix[0][0];
        int n=matrix.size();
        int maxi=matrix[n-1][n-1];
        if(k==1)
            return mini;
        while(mini<=maxi)
        {
            int mid=(mini+maxi)/2;
            int cnt1=monotonicfunc(matrix,mid);
            if(cnt1<k)
                mini=mid+1;
            else
            {
             int cnt2=monotonicfunc(matrix,mid-1);
                if(cnt2<k)
                    return mid;
                else
                    maxi=mid-1;
                    
            }
            
        }
        return 0;
    }
};
